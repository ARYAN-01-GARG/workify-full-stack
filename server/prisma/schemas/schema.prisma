generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  ADMIN
  RECRUITER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  password     String
  isVerified   Boolean  @default(false)
  profileImage String?
  version      Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Role     @default(CANDIDATE)

  posts        Post[]
  pastEmployer Employer[]
  recruiter    Recruiter?
  candidate    Candidate?
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Post {
  id           String        @id @default(cuid())
  title        String
  description  String
  image        String
  location     String
  remote       Boolean
  isActive     Boolean       @default(true)
  company      String
  skills       String[]
  offerMin     Int          @default(0)
  offerMax     Int
  duration     Int
  experience   Int
  applications Application[]
  startDate    String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relation of Post with user
  user User @relation(fields: [userId], references: [id])

  @@index([createdAt])
}

model Recruiter {
  id             String   @id @default(cuid())
  userId         String   @unique
  companyName    String
  jobTitle       String?
  jobDescription String?
  jobLocation    String?
  companyEmail   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relation of Recruiter with user
  user User @relation(fields: [userId], references: [id])
}

model Candidate {
  id           String   @id @default(cuid())
  userId       String   @unique
  resume       String?
  portfolio    String?
  github       String?
  location     String?
  certificates String[]
  skills       String[]
  experience   Int?     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  education Education[]
  projects  Project[]

  user User @relation(fields: [userId], references: [id])
}

model Education {
  id            String   @id @default(cuid())
  userId        String
  degree        String
  institution   String
  yearOfPassing Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  candidate Candidate @relation(fields: [userId], references: [id])
}

model Project {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String
  link         String?
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  candidate Candidate @relation(fields: [userId], references: [id])
}

model Employer {
  id           String    @id @default(cuid())
  userId       String
  companyName  String
  position     String
  description  String
  startDate    DateTime
  endDate      DateTime?
  companyEmail String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum JobPostStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Application {
  id          String        @id @default(cuid())
  postId      String
  candidateId String
  status      JobPostStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relation of Application with Post and Candidate
  post Post @relation(fields: [postId], references: [id])

  @@unique([candidateId, postId])
  @@index([postId])
}

model Image {
  id        String   @id @default(cuid())
  publicId  String
  url       String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([publicId, url])
}
